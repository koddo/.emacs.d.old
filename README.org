* find-file-in-project (v5.2.4)
Find files in a project quickly on *any operating system*.

This program provides a couple methods for quickly finding any file in a given project. It depends on [[http://www.gnu.org/software/findutils/][GNU Find]].

By default, it will *automatically* search files in a directory managed by *git/subversion/mercurial*. But you can easily switch to other types of projects.

Features:
- Only dependency is GNU Find
- Works perfectly on any OS with minimum or no setup
- Quick. Tested with 50,000+ files
- You can tweak GNU find through flag =ffip-find-options=
- Smart. For keyword "helloWorld", "HelloWorld.html" "hello-world.css", "HelloWorld.js" are searched

Screenshot:

[[https://raw.githubusercontent.com/technomancy/find-file-in-project/master/ffip-screenshot-nq8.png]]

* Install
Place [[https://raw.githubusercontent.com/technomancy/find-file-in-project/master/find-file-in-project.el][find-file-in-project.el]] on your =load-path=, and add this to your configuration:

#+begin_src elisp
(autoload 'find-file-in-project "find-file-in-project" nil t)
(autoload 'find-file-in-project-by-selected "find-file-in-project" nil t)
(autoload 'find-directory-in-project-by-selected "find-file-in-project" nil t)
(autoload 'ffip-show-diff "find-file-in-project" nil t)
(autoload 'ffip-save-ivy-last "find-file-in-project" nil t)
(autoload 'ffip-ivy-resume "find-file-in-project" nil t)
#+end_src

It is also possible to use [[http://stable.melpa.org/#/find-file-in-project][melpa]]; however be aware that as of the time of this writing installation using =package.el= is [[https://glyph.twistedmatrix.com/2015/11/editor-malware.html][not recommended]] due to flaws in Emacs's TLS implementation.

[[https://github.com/abo-abo/swiper][Ivy-mode]] is the optional dependency which is installed automatically if you use melpa. If it is not found, ido will be used instead.

Since v3.7, Emacs 24.3 is required.
* Setup
** Windows
Windows setup is as easy as *installing [[http://cygwin.com][Cygwin]] or [[https://msys2.github.io/][MYSYS2]] at default directory of any driver*. =GNU Find= executable will be detected automatically.

You can also manually specify the location of find executable,
#+begin_src elisp
(if (eq system-type 'windows-nt)
    (setq ffip-find-executable "c:\\\\cygwin64\\\\bin\\\\find")
#+end_src

** Linux and OS X
NO setup needed.
* Usage
Project root is *automatically* detected if Git/Mercurial/Subversion is used.

You can override the default root directory by setting =ffip-project-root=,
#+begin_src elisp
(setq ffip-project-root "~/projs/PROJECT_DIR")
#+end_src
** =M-x find-file-in-project-by-selected=
Use the *selected region as keyword to search file*. If no region selected, you need provide the keyword. Keyword could contain wildcard which passed to Find as value of =-name= option

If keyword contains line number like "hello.txt:32" or "hello.txt:32:", we will move to that line in opened file.

If parameter is passed , file will be opened in new window.

If you =(setq ffip-match-path-instead-of-filename t)= before =M-x find-file-in-project-by-selected=, we try to match selected text any part of full path (directory+file name) before displaying candidates. It's a little slower than the original setup but make find-file-in-project behaves exactly like Sublime Text's Cmd+P.
** =M-x find-directory-in-project-by-selected=
Use the *selected region as keyword to find directory*. If no region selected, you need provide the keyword. Keyword could contain wildcard character which passed to Find as value of =-iwholename= option

If parameter is passed , directory will be opened in new window.
** =M-x find-file-in-project=
Starts search immediately
** =M-x ffip-create-project-file=
Create .dir-locals.el which "[[http://www.gnu.org/software/emacs/manual/html_node/emacs/Directory-Variables.html][defines the same set of local variables to all the files in a certain directory and its subdirectory]]".

You can use it to setup find-file-in-project variable like "ffip-project-root".

See [[http://www.gnu.org/software/emacs/manual/html_node/emacs/Directory-Variables.html][Emacs manual]] for technical details.
** =M-x find-file-in-current-directory=
Like =M-x find-file-in-project= but find only in current directory.
** =M-x find-file-in-current-directory-by-selected=
Like =M-x find-file-in-project-by-selected= but find only in current directory.
** =M-x ffip-show-diff=
Execute selected backend from =ffip-diff-backends=. The selected index, whose default value in zero, is the parameter passed to =ffip-show-diff=.

The output of execution of backend is expected to be [[http://www.gnu.org/software/diffutils/manual/html_node/Unified-Format.html][Unified Diff Format]].

The output is inserted into  =*ffip-diff*= buffer where you can press =o=, =C-c C-c=, =ENTER= , =M-x ffip-diff-find-file=  to open the corresponding file.

=ffip-diff-find-file-before-hook= is called before =M-x ffip-diff-find-file=.

For example, you can =M-x ffip-show-diff= to view the git commit and open corresponding file.

If you use [[https://www.mercurial-scm.org/][Mercurial]], =M-x 5 ffip-show-diff=.

Please press =C-h v ffip-diff-backends= to view the available back-ends.

Other key bindings available in =*ffip-diff*= buffer,
| key binding | command        |
|-------------+----------------|
| p           | diff-hunk-prev |
| n           | diff-hunk-next |
| P           | diff-file-prev |
| N           | diff-file-next |

Insert below code into ~/.emacs if you use evil-mode,
#+begin_src elisp
(defun ffip-diff-mode-hook-setup ()
    (evil-local-set-key 'normal "p" 'diff-hunk-prev)
    (evil-local-set-key 'normal "n" 'diff-hunk-next)
    (evil-local-set-key 'normal "P" 'diff-file-prev)
    (evil-local-set-key 'normal "N" 'diff-file-next)
    (evil-local-set-key 'normal (kbd "RET") 'ffip-diff-find-file)
    (evil-local-set-key 'normal "o" 'ffip-diff-find-file))
(add-hook 'ffip-diff-mode-hook 'ffip-diff-mode-hook-setup)
#+end_src

You can customize the =ffip-diff-backends=,
#+begin_src elisp
(setq ffip-diff-backends
      '(ffip-diff-backend-git-show-commit
        "cd $(git rev-parse --show-toplevel) && git diff"
        "cd $(git rev-parse --show-toplevel) && git diff --cached"
        ffip-diff-backend-hg-show-commit
        (car kill-ring)
        "cd $(hg root) && hg diff"
        "svn diff"))
#+end_src
** =M-x ffip-save-ivy-last= and =M-x ffip-ivy-resume=
These two commands requires [[https://github.com/abo-abo/swiper][ivy-mode]].

=ffip-save-ivy-last= saves the most recent search result.

=ffip-ivy-resume= re-use the search result *saved* by =ffip-save-ivy-last=.

You can always use =ivy-resume= to re-use the most recent search result.
* Tips
All tips are OPTIONAL. find-file-in-project works out of box in 99% cases.
** You prefer ido-mode?
#+begin_src elisp
(ido-mode 1)
(setq ffip-prefer-ido-mode t)
#+end_src
** APIs
- "ffip-get-project-root-directory" return the full path of current project
** Per-project setup using Emacs lisp
Here is complete setup you could insert into "~/.emacs.d/init.el",
#+begin_src elisp
;; if the full path of current file is under SUBPROJECT1 or SUBPROJECT2
;; OR if I'm reading my personal issue track document,
(defun my-setup-develop-environment ()
  (interactive)
  (when (ffip-current-full-filename-match-pattern-p "\\(/|/PROJECT_DIR\\|issue-track.org\\)")
    ;; Though PROJECT_DIR is team's project, I care only its sub-directory "subproj1""
    (setq-local ffip-project-root "~/projs/PROJECT_DIR/subproj1")
    ;; well, I'm not interested in concatenated BIG js file or file in dist/
    (setq-local ffip-find-options "-not -size +64k -not -iwholename '*/dist/*'")
    ;; for this project, I'm only interested certain types of files
    (setq-local ffip-patterns '("*.html" "*.js" "*.css" "*.java" "*.xml" "*.js"))
    ;; exclude below directories and files
    (setq-local ffip-prune-patterns '("*/.git/*" "*/node_modules/*" "*/index.js")))
  ;; insert more WHEN statements below this line for other projects
  )
;; most major modes inherit from prog-mode, so below line is enough
(add-hook 'prog-mode-hook 'my-setup-develop-environment)
#+end_src
** Per-directory setup using .dir-locals.el
All variables may be overridden on a per-directory basis in your .dir-locals.el. See (info "(Emacs) Directory Variables") for details.

You only need place .dir-locals.el into your project root directory.

Here is a sample .dir-locals.el,
#+begin_src elisp
((nil . ((ffip-project-root . "~/projs/PROJECT_DIR")
         (ffip-find-options . "-not -size +64k -not -iwholename '*/dist/*'")
         (ffip-patterns . ("*.html" "*.js" "*.css" "*.java" "*.xml" "*.js"))
         (ffip-prune-patterns . ("*/.git/*" "*/node_modules/*" "*/index.js"))
         )))
#+end_src

Please use either per-directory setup or per-project setup, *NOT* both.
** Specify root directory on Windows
#+begin_src elisp
(if (eq system-type 'windows-nt)
    ;; Native Windows
    (setq ffip-project-root "C:/Users/myname/projs/myproj1")
  ;; Cygwin
  (setq ffip-project-root "~/projs/myprojs1"))
#+end_src
** Search multiple file name patterns
The variable =ffip-filename-rules= create some extra file names for
search when calling =find-file-in-project-by-selected=. For example,
When file basename =helloWorld= provided, =HelloWorld=, =hello-world=
are added as the file name search patterns.

=C-h v ffip-filename-rules= to see its default value.

As other variables, it could be customized per project,
#+begin_src elisp
(setq-local ffip-filename-rules
            '(;; first, search by the original file name
              ffip-filename-identity
              ;; second, apply either below rule
              (ffip-filename-dashes-to-camelcase ffip-filename-camelcase-to-dashes)))
#+end_src

That's especially useful when you are doing web front end development.
** More keybinding tips
=C-h i g (ivy) Enter= for more key-binding tips.
* Development
Please note *only* =ivy-read= from ivy-mode is used. DO NOT use other APIs from =ivy-mode=. The less APIs used, the more stable this package will be.
* Bug Report
Check [[https://github.com/technomancy/find-file-in-project]].
